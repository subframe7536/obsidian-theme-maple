@use 'sass:string';

@function with-no-plugin($selector) {
  @return string.unquote('body:is(:not(.css-settings-manager),#{$selector})');
}

@mixin use-no-plugin($selector, $suffix: '') {
  body:is(
      :not(.css-settings-manager),
      #{string.unquote($selector)}
    )#{string.unquote($suffix)} {
    @content;
  }
}
@mixin use-panel($name, $child: '') {
  .workspace-leaf-content[data-type='#{$name}'] #{string.unquote($child)} {
    @content;
  }
}

@function use-opt($name, $fallback) {
  @return var(--setting-#{string.unquote($name)}, $fallback);
}

@mixin use-print($selector) {
  :is(#{$selector}, #{$selector} .print) {
    @content;
  }
}

@mixin use-icon($icon-name, $bg: currentColor) {
  -webkit-mask: icon($icon-name) no-repeat;
  -webkit-mask-size: 100% 100%;
  background-color: $bg;
  color: inherit;
}
